# ---------------------------------------------------------------
# Importa√ß√£o de bibliotecas e fun√ß√µes do projeto
# ---------------------------------------------------------------
import os                      # Biblioteca padr√£o, √∫til para lidar com diret√≥rios (n√£o est√° sendo usada diretamente aqui)
import subprocess              # Usado para executar comandos externos, como abrir o Streamlit no navegador

# Importa as fun√ß√µes respons√°veis pelas diferentes camadas do pipeline
from scripts.bronze_ingest import get_matches, save_bronze        # Camada Bronze ‚Üí coleta dados da API e salva como JSON
from scripts.silver_transform import transform_bronze_to_silver   # Camada Silver ‚Üí transforma JSON em CSV tabular
from scripts.gold_metrics import generate_team_metrics            # Camada Gold ‚Üí gera m√©tricas de desempenho dos times
from scripts.scorers_ingest import get_scorers                    # Camada Gold extra ‚Üí gera ranking de artilheiros

# ---------------------------------------------------------------
# Defini√ß√£o da competi√ß√£o
# ---------------------------------------------------------------
COMPETITION = "BSA"  # Brasileir√£o S√©rie A (c√≥digo "BSA" na Football Data API)

# ---------------------------------------------------------------
# Fun√ß√£o principal que executa o pipeline completo
# ---------------------------------------------------------------
def run_pipeline():
    print("üöÄ Iniciando pipeline de dados do Brasileir√£o...")

    # ------------------------------
    # 1. Bronze ‚Üí Coletar dados crus
    # ------------------------------
    print("\nüì• Etapa 1: Ingest√£o (Bronze)")
    # Chama a API para buscar as partidas do Brasileir√£o 2025
    matches = get_matches(competition=COMPETITION, season=2025)
    # Salva os dados crus (JSON) na camada Bronze
    save_bronze(matches, competition=COMPETITION)

    # ------------------------------
    # 2. Silver ‚Üí Transformar dados
    # ------------------------------
    print("\n‚öôÔ∏è Etapa 2: Transforma√ß√£o (Silver)")
    # Converte os arquivos JSON da Bronze em tabelas CSV limpas
    df_silver = transform_bronze_to_silver(competition=COMPETITION)
    # Exibe no console as primeiras linhas da tabela resultante
    print(df_silver.head())

    # ------------------------------
    # 3. Gold ‚Üí Gerar m√©tricas dos times
    # ------------------------------
    print("\nüèÜ Etapa 3: M√©tricas (Gold)")
    # Calcula pontos, vit√≥rias, empates, derrotas, saldo de gols, etc.
    df_gold = generate_team_metrics(competition=COMPETITION)
    # Exibe no console as primeiras linhas da classifica√ß√£o
    print(df_gold.head())

    # ------------------------------
    # 4. Gold extra ‚Üí Ranking de artilheiros e assist√™ncias
    # ------------------------------
    print("\nü•á Etapa 4: Ranking de Artilheiros e Assist√™ncias")
    # Busca o ranking de artilheiros (limitado aos 20 primeiros)
    df_scorers = get_scorers(competition=COMPETITION, limit=20)
    # Exibe no console os primeiros jogadores do ranking
    print(df_scorers.head())

    # ------------------------------
    # 5. Dashboard ‚Üí Abrir visualiza√ß√£o no Streamlit
    # ------------------------------
    print("\nüìä Etapa 5: Dashboard (abrindo no navegador)")
    # Executa o comando para rodar o app do Streamlit e abrir a dashboard
    subprocess.run(["streamlit", "run", "dashboard/app.py"])

# ---------------------------------------------------------------
# Bloco principal (executado apenas se rodar este arquivo direto)
# ---------------------------------------------------------------
if __name__ == "__main__":
    run_pipeline()
